Tổng quan về web, mô hình ứng dụng web

🧠1. Web là gì?
Web (World Wide Web) là hệ thống các tài liệu siêu văn bản (HTML) được liên kết với nhau và truy cập thông qua trình duyệt (browser) như Chrome, Firefox...

Khi bạn vào một trang web, trình duyệt gửi yêu cầu (request) đến máy chủ (server), nhận về trang web (response) để hiển thị.

🧠2. Cấu trúc cơ bản một website
📘Frontend (giao diện người dùng – chạy ở trình duyệt):

HTML (nội dung)

CSS (giao diện)

JavaScript (tương tác, xử lý logic trên trình duyệt)

📘Backend (xử lý logic, kết nối CSDL – chạy ở server):

Các ngôn ngữ như: Java, PHP, Python, Node.js...

Kết nối với CSDL như: MySQL, PostgreSQL, MongoDB...

Database (nơi lưu trữ dữ liệu):

Dữ liệu người dùng, sản phẩm, bài viết...

🧠3. Mô hình ứng dụng Web 
Mô hình ứng dụng web trong java
Ứng dụng web trong Java thường được xây dựng theo mô hình MVC (Model-View-Controller) và có thể triển khai bằng các công nghệ như JSP, Servlet, Spring, Hibernate.

✅ I. MÔ HÌNH MVC LÀ GÌ? 

🧩 MVC viết tắt là:
    M - Model: Quản lý dữ liệu, xử lý logic nghiệp vụ (có thể sử dụng JavaBeans, Hibernate).
    V - View: Hiển thị dữ liệu cho người dùng (thường dùng JSP, HTML, CSS, JavaScript).
    C - Controller: Nhận yêu cầu từ người dùng, xử lý và điều hướng (thường dùng Servlet, Spring Controller).

✅ II. Các công nghệ chính trong ứng dụng web Java
JSP (JavaServer Pages): Dùng để tạo trang web động, có thể nhúng Java code vào HTML.
Servlet: Xử lý yêu cầu từ client, điều phối dữ liệu giữa Model và View.
Spring Framework: Một framework mạnh mẽ giúp xây dựng ứng dụng web linh hoạt và dễ bảo trì.
Hibernate: Thư viện ORM (Object Relational Mapping) giúp quản lý cơ sở dữ liệu dễ dàng hơn.

🔄 Luồng hoạt động:
Người dùng tương tác với View (giao diện).

View gửi yêu cầu tới Controller.

Controller gọi Model để lấy hoặc ghi dữ liệu.

Model truy vấn CSDL, trả dữ liệu lại cho Controller.

Controller gửi dữ liệu tới View để hiển thị.

    [User] → View → Controller → Model → Database
                     ↓            ↑
                   View  ←  Data  ←


    🎯 Ví dụ dễ hiểu (giả sử làm ứng dụng web quản lý sinh viên):
    ình huống: Người dùng muốn xem danh sách sinh viên.

    Thành phần	            Vai trò	                Ví dụ trong Java
    View	            Giao diện	              student_list.jsp
    Controller	    Nhận request, gọi xử lý	     StudentController.java
    Model	        Dữ liệu, kết nối DB	        Student.java, StudentDAO.java

    ➡ Luồng:

    Người dùng vào /students → StudentController nhận request

    Controller gọi StudentDAO.getAllStudents()

    DAO truy vấn CSDL → trả list sinh viên

    Controller đẩy dữ liệu vào student_list.jsp để hiển thị 



Mô hình phổ biến nhất: Kiến trúc 3 tầng là nền tảng của hầu hết các ứng dụng lớn:

Presentation Layer: Giao diện.

Application Layer: Xử lý logic.

Data Layer: Cơ sở dữ liệu.

Các xu hướng hiện đại đáng chú ý:

Single-Page Applications (SPAs): Tải 1 lần, cập nhật động, trải nghiệm mượt mà (VD: Gmail).

Microservices: Chia ứng dụng lớn thành các dịch vụ nhỏ độc lập, dễ mở rộng và quản lý.


✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅

            JSP và Servlet

✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
 
    JSP  (JavaServer Pages) và Servlet là hai công nghệ quan trọng trong lập trình web với Java, giúp xây dựng các ứng 
        dụng web động một cách hiệu quả.

    Servlet: Là một chương trình Java chạy trên máy chủ web, xử lý yêu cầu từ client (trình duyệt) và tạo phản hồi động
    JSP: Là một công nghệ cho phép nhúng mã Java vào trang HTML, giúp tạo trang web động dễ dàng hơn
  
🟢Cả JSP và Servlet đều chạy trên Java EE (Jakarta EE) và thường được triển khai trên các máy chủ ứng dụng như Apache Tomcat, WildFly, GlassFish.

🧠🧠Tổng quan về JSP
    JSP là gì?
    JSP là một công nghệ giúp tạo trang web động bằng cách nhúng mã Java trực tiếp vào HTML. JSP dễ sử dụng hơn Servlet trong việc tạo giao diện web

- Cấu trúc của một trang JSP cơ bản
    Một trang JSP có thể chứa các phần tử sau:
    HTML: Định dạng giao diện web
    Scriptlet (<% Java code %>) : Chèn mã Java vào JSP
    Expression (<%= expression %>): In giá trị ra trang HTML

 

- Cách hoạt động của JSP
    Yêu Cầu Trang JSP: Khi người dùng truy cập một trang JSP thông qua trình duyệt, yêu cầu sẽ được gửi đến máy chủ.
    Biên Dịch Mã Java: Máy chủ sẽ biên dịch mã Java trong trang JSP thành mã byte.
    Sinh Ra Mã HTML: Sau khi biên dịch xong, mã Java sẽ sinh ra mã HTML dựa trên dữ liệu và logic trong mã.
    Trả Về Trình Duyệt: Mã HTML sinh ra sẽ được gửi trở lại trình duyệt và hiển thị trên trang web.

🎯 TÓM TẮT LUỒNG JSP – SERVLET

[1] Browser → gửi yêu cầu (URL hoặc form)
      ↓
[2] Servlet → xử lý logic, gọi database
      ↓
[3] Servlet → forward dữ liệu đến JSP
      ↓
[4] JSP → hiển thị giao diện HTML (View)
      ↓
[5] Browser nhận HTML → hiển thị kết quả

🔄 VÍ DỤ THỰC TẾ (User login)
    Người dùng nhập username/password và bấm login

    Form gửi dữ liệu tới LoginServlet

    Servlet kiểm tra thông tin → nếu đúng → chuyển hướng sang welcome.jsp

    Nếu sai → quay lại login.jsp và báo lỗi


🧠🧠Tổng quan về Servlet
Servlet là gì?
    Servlet là một thành phần Java chạy trên máy chủ, được sử dụng để xử lý các yêu cầu HTTP từ trình duyệt web và trả về phản hồi phù hợp

Cách hoạt động của Servlet
    Nhận yêu cầu: Servlet container (ví dụ: Tomcat) nhận yêu cầu và xác định Servlet tương ứng để xử lý nó
    Khởi tạo Servlet: Nếu Servlet chưa được tạo, container sẽ khởi tạo nó trước khi xử lý yêu cầu
    Xử lý yêu cầu: Servlet xử lý yêu cầu bằng cách sử dụng các tham số truyền vào từ yêu cầu, tải dữ liệu từ cơ sở dữ liệu nếu cần, và thực hiện các thao tác xử lý khác
    Tạo phản hồi: Sau khi xử lý, Servlet tạo ra một phản hồi, có thể là mã HTML, XML hoặc JSON
    Gửi phản hồi: Phản hồi được gửi từ Servlet container đến máy chủ web, sau đó được truyền lại cho người dùng qua trình duyệt


✅ I. JSP vs Servlet: GIỐNG NHAU – KHÁC NHAU

🟢 1. Giống nhau
Tiêu chí	                         JSP & Servlet
Ngôn ngữ	                       Đều dùng Java
Mục đích	                     Dùng để tạo ứng dụng web Java chạy trên Web Server (Tomcat)
Cách hoạt động	                Đều là thành phần xử lý request – response trong Java EE (Jakarta EE)
Phải chạy qua                   Đều chạy trên Tomcat, Jetty,...
Servlet container	

🔴 2. Khác nhau
Tiêu chí	                      Servlet	                                   JSP
Vị trí sử dụng      	Xử lý logic, điều hướng, truy vấn DB...      Hiển thị giao diện, render dữ liệu
Mã viết	Java thuần          (Java code 100%)	                    HTML là chính, chèn Java vào
Mã ví dụ	                doGet(), doPost()	                <% for(...) { %> ... <% } %>
Dễ đọc	                Khó đọc nếu chứa HTML           	Dễ đọc, gần giống web HTML thông thường
Sinh ra             	Bạn tự viết Java class      	JSP được biên dịch thành Servlet sau hậu trường
Tái sử dụng	Dễ           test, tách lớp	                Khó tái sử dụng nếu viết logic trong JSP

💡 JSP bản chất cũng là Servlet – khi bạn chạy .jsp, Tomcat biên dịch nó thành một Servlet sau hậu trường!

🔹 JSP (JavaServer Pages)

Luồng hoạt động:
	1.	Client gửi request (thường là qua trình duyệt) tới một file .jsp trên web server (chạy trong web container như Tomcat).
	2.	Web container chuyển yêu cầu đó tới JSP Engine.
	3.	JSP Engine biên dịch file .jsp thành một Servlet tương ứng (chỉ làm 1 lần khi file JSP đó được gọi lần đầu hoặc khi có thay đổi).
	4.	Servlet được biên dịch thành mã bytecode Java (file .class).
	5.	Servlet thực thi:
	•	Nhúng nội dung động vào trong HTML (ví dụ: lấy dữ liệu từ DB, xử lý logic, hiển thị thông tin).
	•	Sinh ra mã HTML hoàn chỉnh.
	6.	HTML này được trả về client để hiển thị.

✅ JSP thích hợp để xây dựng giao diện (view), vì dễ trộn lẫn giữa HTML và Java.

🔹 Servlet

Luồng hoạt động:
	1.	Client gửi request tới một URL được ánh xạ tới một Servlet.
	2.	Web container gọi đến phương thức xử lý của Servlet như:
	•	doGet(), doPost(), v.v.
	3.	Servlet xử lý request, ví dụ:
	•	Đọc tham số từ form (request.getParameter(...)).
	•	Kết nối DB, xử lý logic nghiệp vụ.
	4.	Servlet tạo response (thường là HTML) thông qua đối tượng HttpServletResponse.
	5.	HTML (hoặc dữ liệu khác: JSON, XML, file…) được gửi về client.

✅ Servlet phù hợp để xử lý logic nghiệp vụ và điều hướng luồng dữ liệu (controller trong mô hình MVC).

🔁 So sánh nhanh

Tiêu chí	        JSP	                       Servlet
Vai trò chính	Giao diện (View)	        xử lý logic (Controller)
Cách viết	        HTML + Java         	Java thuần
Dễ bảo trì  Kém (khi nhúng nhiều Java vào)	Tốt hơn (tách riêng logic)
Biên dịch	Tự động chuyển thành Servlet	Viết thủ công




🔁 LUỒNG HOẠT ĐỘNG CỦA JSP VÀ SERVLET (Java Web cơ bản)
🧭 Bước 1: Người dùng gửi yêu cầu (Request) từ trình duyệt
    Ví dụ:

    Người dùng gõ URL http://localhost:8080/app/students

    Hoặc bấm nút submit form gửi dữ liệu

🧭 Bước 2: Web Server (Tomcat) nhận yêu cầu và định tuyến đến Servlet
    Tomcat tra bảng mapping (web.xml hoặc @WebServlet) để biết yêu cầu /students nên chuyển đến Servlet nào

    Ví dụ: /students → StudentServlet

🧭 Bước 3: Servlet xử lý logic
    Servlet chạy phương thức doGet() hoặc doPost() tùy loại request

    Trong đó:

    Gọi Model hoặc DAO để lấy dữ liệu từ database

    Xử lý nghiệp vụ, kiểm tra dữ liệu, v.v.
Ví dụ:

    List<Student> list = studentDAO.getAllStudents();
    request.setAttribute("students", list);
    request.getRequestDispatcher("student.jsp").forward(request, response);


🧭 Bước 4: Servlet chuyển tiếp dữ liệu sang JSP (View)
Dùng RequestDispatcher.forward() để chuyển dữ liệu sang file JSP

Dữ liệu được đẩy vào request scope (request.setAttribute(...))

🧭 Bước 5: JSP nhận dữ liệu và hiển thị giao diện
JSP lấy dữ liệu từ request để hiển thị dưới dạng HTML

Ví dụ:
    <c:forEach items="${students}" var="s">
    <tr>
        <td>${s.id}</td>
        <td>${s.name}</td>
    </tr>
    </c:forEach>


🧭 Bước 6: Trình duyệt nhận trang HTML từ JSP và hiển thị
    Kết quả là một trang HTML tĩnh đã được server "render sẵn"

    Người dùng thấy danh sách sinh viên trên trình duyệt


🎯 TÓM TẮT LUỒNG JSP – SERVLET

[1] Browser → gửi yêu cầu (URL hoặc form)
      ↓
[2] Servlet → xử lý logic, gọi database
      ↓
[3] Servlet → forward dữ liệu đến JSP
      ↓
[4] JSP → hiển thị giao diện HTML (View)
      ↓
[5] Browser nhận HTML → hiển thị kết quả



✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅

HTTP REQUEST VÀ HTTP RESPONCE

✅ HTTP Request là gì?
    👉 Là yêu cầu mà trình duyệt (client) gửi đến server để lấy thông tin hoặc gửi dữ liệu.

📌 Ví dụ:

    Khi bạn gõ google.com và nhấn Enter → trình duyệt gửi một HTTP Request đến server Google.


✅ HTTP Response là gì?
    👉 Là phản hồi mà server trả lại sau khi xử lý yêu cầu từ client.

📌 Ví dụ:

    Sau khi nhận yêu cầu, server Google gửi lại trang HTML kết quả → đó là HTTP Response.

 🔁 Tóm tắt quy trình:   
    Client (trình duyệt) --> HTTP Request --> Server
    
    Server xử lý --> HTTP Response --> Client (hiển thị)

👉 Hiểu đơn giản:

    HTTP Request là yêu cầu do client (trình duyệt) gửi lên server.

    HTTP Response là phản hồi từ server gửi lại client sau khi đã xử lý yêu cầu.

    📌 Request = "Tôi muốn xem gì đó"
    📌 Response = "Đây là nội dung bạn cần"

    
✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅

✅ JSTL (JavaServer Pages Standard Tag Library) là thư viện thẻ (tag) dùng trong JSP để viết code ngắn gọn, thay cho Java thuần.

🔹 Hiểu đơn giản:
    👉 JSTL giúp thay thế mã Java bằng các thẻ HTML-like, giúp code dễ đọc hơn.

🔧 Ví dụ so sánh:
❌ Không dùng JSTL:

    <%
   for(String name : names){
       out.println("<li>" + name + "</li>");
   }
    %>

✅ Dùng JSTL:

   <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
    <c:forEach var="name" items="${names}">
        <li>${name}</li>
    </c:forEach>

📦 JSTL gồm nhiều thẻ như:
    Nhóm thẻ	            Mục đích
    core	        Điều kiện, vòng lặp, biến...
    fmt	        Định dạng số, ngày, nội dung đa ngôn ngữ
    sql	        Truy vấn CSDL (dùng cho demo, không nên dùng thực tế)
    xml	        Xử lý dữ liệu XML



✅ thẻ <c:set>
Dùng để tạo biến trong JSP mà không cần code Java

    <c:set var="name" value="Truong"/>
    <p> xin chao ${name}</p>

✅ thẻ <c:out>
 Dùng để in dữ liệu
    Tương đương với <%= > trong JSP

    <c:out value="Huyfh"/>
    <c:out value="truong"/>
    <c:out value="234"/>

✅ thẻ <c:if>
Tương đương với if trong Java

    <c:set var="age" value="19"/>
    <c:if test="${age > 20}">
        <p>Ban da du tuoi</p>
    </c:if>
    <c:if test="${age > 18}">
        <h2>Bạn chưa du tuoi</h2>
    </c:if>



✅ thẻ <c:choose>, <c:when>, <c:otherwise>
Tương đương với if else if trong java


    <c:set var="score" value="3"/>

    <c:choose>
        <c:when test="${score > 8}">
            <p>Gioi</p>
        </c:when>
        <c:when test="${score > 7}">
            <p>Kha</p>
        </c:when>
        <c:when test="${score > 5}">
            <p>TB</p>
        </c:when>
        <c:otherwise>
            <p>Yeu</p>
        </c:otherwise>
    </c:choose>

 ✅  thẻ <c:forEach>
    Tương đương for trong Java, dùng để duyệt mảng hoặc danh sách:

    <c:forEach begin="1" end="5">
        <h3>Item ${i}</h3>
    </c:forEach>


  ✅Thẻ < c:catch>
    Thẻ <c:catch> bắt bất kỳ ngoại lệ nào được ném trong phạm vi bao bọc của nó. Nếu ngoại lệ được ném, giá trị của nó được lưu trữ trong thuộc tính var của thẻ này.

Cách sử dụng thông thường có thể như sau:
    <c:catch var ="exceptionThrown">
        <% int x = Integer.valueOf("a");%>
    </c:catch>

Và để kiểm tra xem ngoại lệ có được đưa ra hay không,
 chúng ta sử dụng thẻ <c:if> như hiển thị bên dưới:

   <c:if test = "${exceptionThrown != null}">
    <p>The exception is : ${exceptionThrown} <br />
      There is an exception: ${exceptionThrown.message}
    </p>
    </c:if>

✅ Thẻ < c:import>
Thẻ <c:import> xử lý việc truy xuất và hiển thị nội dung từ URL tuyệt đối hoặc tương đối.
    <c:import var = "data" url = "http://www.example.com"/>



✅ Thẻ <c:url> và <c:param>
Thẻ <c:url> hữu ích để định dạng URL với mã hóa yêu cầu phù hợp. URL đã định dạng được lưu trữ trong thuộc tính var .
Thẻ <c:url> cũng có thẻ phụ <c:param> được sử dụng để chỉ định tham số URL.
   <c:url value = "/core_tags" var = "myURL">
    <c:param name = "parameter_1" value = "1234"/>
    <c:param name = "parameter_2" value = "abcd"/>
    </c:url>


✅ Thẻ <fmt:formatDate>
Thẻ <fmt:formatDate> hữu ích trong việc định dạng ngày tháng hoặc thời gian.
cũng có thuộc tính pattern nơi chúng ta có thể chỉ định mẫu định dạng mong muốn
    <c:set var="now" value="<%= new java.util.Date()%>"/>
    <fmt:formatDate type="time" value="${now}"/>



✅✅✅✅ BÀI WEBAPP
   protected void listStudents(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setAttribute("students", studentDao.findAll());
        RequestDispatcher dispatcher = request.getRequestDispatcher("index.jsp");
        dispatcher.forward(request, response);
    }


✅ Ví dụ “nói cho dễ hiểu”:

Mình gọi DAO như người đi lấy hàng trong kho.

setAttribute giống như đặt hàng đó vào túi (request).

dispatcher là địa chỉ nơi giao hàng (index.jsp).

forward là đưa cả túi hàng (request/response) sang đó để mở ra và trưng bày (hiển thị danh sách).


NOTE lỗi 404
 if (request.getAttribute("students") == null) {
        response.sendRedirect("/students?action=list");
    }
⚠️ Đây là logic sai phổ biến — vì sendRedirect() là hàm HTTP response, nhưng bạn đang forward từ Servlet sang JSP, nên response đã bắt đầu xử lý rồi. Việc gọi redirect lúc đó gây lỗi.



✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅

✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅

GIỚI THIỆU VỀ SPRING FRAMWORK

✅ Tóm tắt 80% – Ý chính:
Spring là gì?
➤ Framework mã nguồn mở cho Java, giúp phát triển ứng dụng nhanh, dễ bảo trì.

Mục tiêu chính:
➤ Giảm phụ thuộc giữa các thành phần (D.I – Dependency Injection)
➤ Tăng tính mở rộng và dễ kiểm thử

Dùng để làm gì?
➤ Viết app web, app backend, REST API, microservices, quản lý transaction, bảo mật, v.v.

Tại sao nên dùng Spring?
➤ Cấu trúc rõ ràng
➤ Hỗ trợ tốt cho module hóa
➤ Dễ tích hợp với công nghệ khác: JPA, Hibernate, MySQL, MongoDB...

🧩 20% – Chi tiết mở rộng (ngắn gọn):
Spring Core: Hạt nhân xử lý DI (Inject phụ thuộc)

Spring MVC: Tạo ứng dụng web theo mô hình MVC

Spring Boot: Giúp tạo ứng dụng Spring nhanh, cấu hình tối giản

Spring Data: Hỗ trợ truy xuất dữ liệu từ database dễ dàng hơn, tích hợp với Hibernate, JPA, JDBC

Spring Security: Cung cấp bảo mật (xác thực, phân quyền)

Spring AOP: Lập trình hướng khía cạnh (Aspect-Oriented Programming)


🧭 Kiến trúc tổng quan gồm 3 thành phần chính:
Thành phần	            Vai trò
Model	        Chứa dữ liệu & logic nghiệp vụ
View	        Hiển thị dữ liệu cho người dùng (JSP, Thymeleaf,...)
Controller  	Xử lý yêu cầu từ client, gọi model, trả kết quả về view

🔁 Luồng xử lý yêu cầu (Request Flow):

    Client → DispatcherServlet → Controller → Service → DAO → DB
                         ↓
                     View Resolver → View (HTML)

DispatcherServlet: Trung tâm tiếp nhận mọi request (giống "trạm điều phối")

Controller: Nhận request, xử lý và trả ModelAndView

View Resolver: Chọn view phù hợp để hiển thị

View: Giao diện hiển thị (JSP, Thymeleaf,...)

🔁Annotation thường dùng:

    @Controller, @RequestMapping, @GetMapping, @PostMapping

    @ModelAttribute, @PathVariable, @RequestParam

🎯 Ví dụ mini:
    @Controller
    public class HelloController {
        @GetMapping("/hello")
        public String sayHello(Model model) {
            model.addAttribute("message", "Xin chào Spring MVC!");
            return "hello";   // Trả về view hello.jsp hoặc hello.html
        }
    }




✅ Các thành phần chính:
⭐ 1. DispatcherServlet
    Trung tâm của Spring MVC.

    Là Front Controller pattern.

    Nhận tất cả request web.

    Phân phối request đến Controller thích hợp.

    Ví dụ: /customer/list → Controller CustomerController

⭐ 2. HandlerMapping
    Tìm ra Controller nào xử lý URL đó.

    Mapping được khai báo bằng Annotation (@RequestMapping).

⭐ 3. Controller
    Thành phần xử lý logic.

    Nhận request, gọi service/DAO.

    Trả về Model (dữ liệu) và View (tên view).

    Ví dụ:
            @Controller
            public class CustomerController {
                @GetMapping("/customer/list")
                public String listCustomers(Model model) {
                    List<Customer> customers = customerService.findAll();
                    model.addAttribute("customers", customers);
                    return "customerList";  // Tên view
                }
            }

⭐ 4. Model
    Chứa dữ liệu (JavaBean, DTO) mà view cần.

    Controller gán dữ liệu vào Model.

⭐ 5. ViewResolver
    Chọn file View (JSP, Thymeleaf, HTML...) để render.

    Ví dụ: "customerList" → /WEB-INF/views/customerList.jsp

⭐ 6. View
    Giao diện hiển thị cho người dùng cuối.

    JSP/Thymeleaf/FreeMarker.

⭐ 7. Service và DAO (ở tầng dưới)
    Không bắt buộc trong MVC "thuần", nhưng Spring khuyến khích.

    Tách Business Logic (Service) và Data Access (DAO).           

            Controller
                │
                Service
                │
                DAO


✅ 3️⃣ Quy trình Spring MVC hoạt động
✅ Ví dụ: User truy cập /customer/list

1️⃣ Browser gửi HTTP request: GET /customer/list
2️⃣ DispatcherServlet nhận request.
3️⃣ HandlerMapping tìm Controller có @RequestMapping("/customer/list").
4️⃣ Gọi phương thức Controller xử lý.
5️⃣ Controller trả về tên View + Model.
6️⃣ ViewResolver tìm file JSP hoặc Thymeleaf phù hợp.
7️⃣ Render HTML trả về Browser.


✅ 4️⃣ Ví dụ rất đơn giản
        @Controller
        public class HelloController {

            @GetMapping("/hello")
            public String sayHello(Model model) {
                model.addAttribute("message", "Hello, Spring MVC!");
                return "hello";
            }
        }

#html 
    <html>
    <body>
        <h1>${message}</h1>
    </body>
    </html>




✅ 1️⃣ Annotation cho Controller
Annotation	                Ý nghĩa
@Controller	        Đánh dấu class là Spring MVC Controller.
@RestController	    Giống @Controller, nhưng trả JSON/XML thay vì view. = @Controller + @ResponseBody

    @Controller
    public class HomeController { ... }

    @RestController
    public class ApiController { ... }


✅ 2️⃣ Mapping HTTP Requests
Annotation	            Ý nghĩa
@RequestMapping	    Ánh xạ URL bất kỳ (GET/POST/PUT/DELETE). Tổng quát.
@GetMapping	Chỉ     ánh xạ GET request.
@PostMapping	    Chỉ ánh xạ POST request.
@PutMapping	        PUT request.
@DeleteMapping	    DELETE request.
@PatchMapping	    PATCH request.

    ✅ Ví dụ:
    @RequestMapping("/products")
    public String list() { ... }

    @GetMapping("/products")
    public String listGet() { ... }

    @PostMapping("/products")
    public String create() { ... }


✅ 3️⃣ Đọc tham số từ request
Annotation	        Ý nghĩa
@RequestParam	    Lấy tham số từ query hoặc form-data.
@PathVariable	    Lấy biến trong URL path.
@RequestBody	    Đọc body (JSON/XML) → object.
@ModelAttribute	    Bind form fields → object.
        ✅ Ví dụ:
        @GetMapping("/users")
        public String find(@RequestParam String name) { ... }

        @GetMapping("/users/{id}")
        public String detail(@PathVariable Long id) { ... }

        @PostMapping("/users")
        public String create(@ModelAttribute User user) { ... }

        @PostMapping("/api/users")
        public User createApi(@RequestBody User user) { ... }



✅ 4️⃣ Trả dữ liệu response
Annotation	        Ý nghĩa
@ResponseBody	    Trả dữ liệu trực tiếp (JSON/XML).
@ResponseStatus	    Đặt HTTP status code.


    ✅ Ví dụ:

        @ResponseBody
        @GetMapping("/api/hello")
        public String hello() {
            return "Hello";
        }

        @ResponseStatus(HttpStatus.CREATED)
        @PostMapping("/api/products")
        public void createProduct() { ... }


✅ 5️⃣ Khai báo bean (service, repo)
Annotation  	Ý nghĩa
@Component	    Bean Spring tổng quát.
@Service	    Bean tầng Service.
@Repository 	Bean tầng DAO (tích hợp exception translation).
@Configuration	    Class config.
@Bean	    Định nghĩa 1 bean trong config.

        ✅ Ví dụ:

        @Service
        public class UserService { ... }

        @Repository
        public class UserRepository { ... }

        @Configuration
        public class AppConfig {
            @Bean
            public MyBean myBean() { ... }
        }


✅ 6️⃣ Dependency Injection
Annotation	    Ý nghĩa
@Autowired	    Tự động inject bean.
@Qualifier	    Chỉ định tên bean cụ thể.
@Value	    Inject giá trị từ properties.

        ✅ Ví dụ:

    @Controller
    public class HomeController { ... }

    @RestController
    public class ApiController { ... }


✅ 7️⃣ Validation
Annotation	        Ý nghĩa
@Valid	        Kích hoạt validation JSR-303/JSR-380.
@Validated	    Validation nâng cao (Spring).

        ✅ Ví dụ:

        @PostMapping("/users")
        public String create(@Valid @ModelAttribute User user, BindingResult result) { ... }


✅ 8️⃣ Session / Cookie
Annotation	            Ý nghĩa
@SessionAttributes	Giữ attribute trong session.
@SessionAttribute	Đọc 1 attribute từ session.
@CookieValue	    Đọc giá trị cookie.


✅ Tóm gọn siêu ngắn (giấy note học bài)
✨ Controller:

@Controller, @RestController

✨ Mapping:

@RequestMapping, @GetMapping, @PostMapping, @PutMapping, @DeleteMapping

✨ Param/Path/Body:

@RequestParam, @PathVariable, @RequestBody, @ModelAttribute

✨ Response:

@ResponseBody, @ResponseStatus

✨ Bean:

@Component, @Service, @Repository, @Configuration, @Bean

✨ DI:

@Autowired, @Qualifier, @Value

✨ Validation:

@Valid, @Validated

✨ Session/Cookie:

@SessionAttributes, @SessionAttribute, @CookieValue




✅ 🎯 Controller

@Controller – Đánh dấu lớp là Spring MVC Controller (trả về View).

@RestController – Controller REST API (trả về JSON/XML).

✅ 🎯 Mapping

@RequestMapping – Ánh xạ URL (tổng quát cho GET/POST/PUT/DELETE).

@GetMapping – Ánh xạ HTTP GET.

@PostMapping – Ánh xạ HTTP POST.

✅ 🎯 Đọc dữ liệu từ request

@RequestParam – Lấy tham số query/form.

@PathVariable – Lấy biến từ path URL.

@ModelAttribute – Bind form fields thành object.

@RequestBody – Bind JSON/XML body → object.

✅ 🎯 Dependency Injection

@Autowired – Tự động inject bean.

✅ 🎯 Phân tầng

@Service – Đánh dấu class tầng Service.

@Repository – Đánh dấu class tầng DAO.

✅ 🎯 Validation

@Valid – Kích hoạt validation cho object.


✅ 📌 Siêu ngắn để học thuộc:

@Controller / @RestController → Định nghĩa Controller
@GetMapping / @PostMapping / @RequestMapping → Ánh xạ URL
@RequestParam / @PathVariable / @ModelAttribute / @RequestBody → Nhận dữ liệu
@Autowired → Inject bean
@Service / @Repository → Phân tầng
@Valid → Validate input

🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯

NGUYÊN LÝ THIẾT KẾ IoC 
🔁 IoC là gì?
Inversion of Control (Đảo ngược điều khiển) là nguyên lý thiết kế mà việc tạo và quản lý đối tượng không do chính nó đảm nhiệm, mà được giao cho một bên khác (container).

Trong Spring, bên "điều khiển" đó chính là Spring Container.

 Ý nghĩa cốt lõi của IoC:
✅ Object không tự tạo dependencies của nó.
✅ Mọi dependency được “bơm vào” từ bên ngoài.

💡 Ví dụ đơn giản (so sánh):
❌ Không dùng IoC (ràng buộc cứng):

    UserService userService = new UserService(new UserRepository());

    
✅ Dùng IoC (Spring lo inject):

    @Autowired
    UserService userService; // Spring tự inject UserRepository
